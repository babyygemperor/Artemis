buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath "io.spring.gradle:propdeps-plugin:0.0.10.RELEASE"
    }
}

plugins {
    id "checkstyle"
    id "java"
    id "maven-publish"
    id "idea"
    id "jacoco"
    id "org.springframework.boot"
    id "com.google.cloud.tools.jib"
    id "com.github.node-gradle.node"
    id "com.diffplug.spotless"
    // this allows us to find outdated dependencies via ./gradlew dependencyUpdates
    id "com.github.ben-manes.versions"
    id "com.github.andygoossens.gradle-modernizer-plugin"
    id "org.openapi.generator" version "5.1.1" // version is included since the plugin is not used by Artemis
    id "io.spring.nohttp" version "0.0.8" // version is included since the plugin is not used by Artemis
    //jhipster-needle-gradle-plugins - JHipster will add additional gradle plugins here
}

group = "de.tum.in.www1.artemis"

sourceCompatibility=17
targetCompatibility=17

apply from: "gradle/docker.gradle"
apply from: "../gradle/liquibase.gradle"
//jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here

if (project.hasProperty("prod")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war")) {
    apply from: "gradle/war.gradle"
}

if (project.hasProperty("zipkin")) {
    apply from: "gradle/zipkin.gradle"
}


apply from: "../gradle/tasks.gradle"

private includedClassFilesForReport(classDirectories) {
    classDirectories.setFrom(files(classDirectories.files.collect {
        fileTree(dir: it,
            includes: ['**/de/tum/in/www1/artemis/usermanagement/**'],
        )
    }))
}

jacocoTestReport.configure {
    // we want to ignore files different from the current project
    afterEvaluate { includedClassFilesForReport(classDirectories) }
}
jacocoTestCoverageVerification.configure {
    // we want to ignore files different from the current project
    afterEvaluate { includedClassFilesForReport(classDirectories) }
}

sourceSets {
    external {
        java {
            srcDir file("../src/main/java")

            // de.tum.in.www1.artemis.security
            include 'de/tum/in/www1/artemis/security/DomainUserDetailsService.*'
            include 'de/tum/in/www1/artemis/security/PBEPasswordEncoder.*'
            include 'de/tum/in/www1/artemis/security/Role.*'
            include 'de/tum/in/www1/artemis/security/SecurityUtils.*'
            include 'de/tum/in/www1/artemis/security/UserNotActivatedException.*'
            include 'de/tum/in/www1/artemis/security/SpringSecurityAuditorAware.*'
            include 'de/tum/in/www1/artemis/security/jwt/TokenProvider.*'
            include 'de/tum/in/www1/artemis/security/jwt/JWTFilter.*'
            include 'de/tum/in/www1/artemis/security/jwt/JWTConfigurer.*'

            // de.tum.in.www1.artemis.management
            include 'de/tum/in/www1/artemis/management/SecurityMetersService.*'

            // de.tum.in.www1.artemis.config
            include 'de/tum/in/www1/artemis/config/audit/AuditEventConverter.*'
            include 'de/tum/in/www1/artemis/config/Constants.*'
            include 'de/tum/in/www1/artemis/config/AsyncConfiguration.*'
            include 'de/tum/in/www1/artemis/config/LiquibaseConfiguration.*'
            include 'de/tum/in/www1/artemis/config/DatabaseConfiguration.*'
            include 'de/tum/in/www1/artemis/config/DateTimeFormatConfiguration.*'
            include 'de/tum/in/www1/artemis/config/JacksonConfiguration.*'
            include 'de/tum/in/www1/artemis/config/LocaleConfiguration.*'
            include 'de/tum/in/www1/artemis/config/RestTemplateConfiguration.*'
            include 'de/tum/in/www1/artemis/config/auth/AtheneAuthorizationInterceptor.*' // needed from RestTemplateConfiguration
            include 'de/tum/in/www1/artemis/config/auth/JiraAuthorizationInterceptor.*' // needed from RestTemplateConfiguration
            include 'de/tum/in/www1/artemis/config/connector/GitLabApiConfiguration.*'
            include 'de/tum/in/www1/artemis/config/connector/JenkinsServerConfiguration.*'

            // de.tum.in.www1.artemis.service
            include 'de/tum/in/www1/artemis/service/FilePathService.*'
            include 'de/tum/in/www1/artemis/service/FileService.*'
            include 'de/tum/in/www1/artemis/service/ScoreService.*'
            include 'de/tum/in/www1/artemis/service/notifications/NotificationTargetService.*'
            include 'de/tum/in/www1/artemis/service/notifications/NotificationTargetProvider.*'
            include 'de/tum/in/www1/artemis/service/compass/umlmodel/UMLElement.*'
            include 'de/tum/in/www1/artemis/service/compass/umlmodel/Similarity.*'
            include 'de/tum/in/www1/artemis/service/compass/assessment/Context.*'
            include 'de/tum/in/www1/artemis/service/dto/**'
            include 'de/tum/in/www1/artemis/service/util/**'
            include 'de/tum/in/www1/artemis/service/listeners/**'
            include 'de/tum/in/www1/artemis/service/ldap/**'
            include 'de/tum/in/www1/artemis/service/user/PasswordService.*'
            include 'de/tum/in/www1/artemis/service/programming/ProgrammingLanguageFeature.*'

            include 'de/tum/in/www1/artemis/service/connectors/bamboo/BambooAuthorizationInterceptor.*' // needed from RestTemplateConfiguration
            include 'de/tum/in/www1/artemis/service/connectors/bitbucket/BitbucketAuthorizationInterceptor.*' // needed from RestTemplateConfiguration
            include 'de/tum/in/www1/artemis/service/connectors/gitlab/GitLabAuthorizationInterceptor.*' // needed from RestTemplateConfiguration
            include 'de/tum/in/www1/artemis/service/connectors/jenkins/JenkinsAuthorizationInterceptor.*' // needed from RestTemplateConfiguration
            include 'de/tum/in/www1/artemis/service/connectors/ConnectorHealth.*'

            // VcsUserManagementService related dependencies
            include 'de/tum/in/www1/artemis/service/connectors/VcsUserManagementService.*'
            include 'de/tum/in/www1/artemis/service/connectors/gitlab/GitLabUserManagementService.*'
            include 'de/tum/in/www1/artemis/service/connectors/gitlab/GitLabUserDoesNotExistException.*'
            include 'de/tum/in/www1/artemis/service/connectors/gitlab/GitLabException.*'
            include 'de/tum/in/www1/artemis/service/connectors/gitlab/GitlabInfoContributor.*'

            // CIUserManagementService related dependencies
            include 'de/tum/in/www1/artemis/service/connectors/CIUserManagementService.*'
            include 'de/tum/in/www1/artemis/service/connectors/jenkins/JenkinsUserManagementService.*'
            include 'de/tum/in/www1/artemis/service/connectors/jenkins/dto/JenkinsUserDTO.*'
            include 'de/tum/in/www1/artemis/service/connectors/jenkins/jobs/JenkinsJobPermissionsService.*'
            include 'de/tum/in/www1/artemis/service/connectors/jenkins/jobs/JenkinsJobPermissionsUtils.*'
            include 'de/tum/in/www1/artemis/service/connectors/jenkins/jobs/JenkinsJobPermission.*'
            include 'de/tum/in/www1/artemis/service/connectors/jenkins/jobs/JenkinsJobService.*'
            include 'de/tum/in/www1/artemis/exception/JenkinsException.*'
            include 'de/tum/in/www1/artemis/service/xml/XmlFileUtils.*'

            // JiraAuthenticationProvider
            include 'de/tum/in/www1/artemis/service/connectors/jira/dto/JiraUserDTO.*'

            // Include all DB entities. repositories and exceptions
            include 'de/tum/in/www1/artemis/domain/**'
            include 'de/tum/in/www1/artemis/exception/**'
            include 'de/tum/in/www1/artemis/repository/**'
            include 'de/tum/in/www1/artemis/validation/**'

            // de.tum.in.www1.artemis.web.rest
            include 'de/tum/in/www1/artemis/web/rest/dto/**'
            include 'de/tum/in/www1/artemis/web/rest/errors/EntityNotFoundException.*'
            include 'de/tum/in/www1/artemis/web/rest/errors/BadRequestAlertException.*'
            include 'de/tum/in/www1/artemis/web/rest/errors/HttpStatusException.*'
            include 'de/tum/in/www1/artemis/web/rest/errors/FieldErrorVM.*'
            include 'de/tum/in/www1/artemis/web/rest/errors/StudentsAlreadyAssignedException.*'
            include 'de/tum/in/www1/artemis/web/rest/errors/InternalServerErrorException.*'
            include 'de/tum/in/www1/artemis/web/rest/errors/AccessForbiddenException.*'
            include 'de/tum/in/www1/artemis/web/rest/errors/ErrorConstants.*'
            include 'de/tum/in/www1/artemis/web/rest/errors/CaptchaRequiredException.*'
            include 'de/tum/in/www1/artemis/web/rest/util/HeaderUtil.*'
            include 'de/tum/in/www1/artemis/web/rest/vm/ManagedUserVM.*'
        }
        resources {
            srcDir '../src/main/resources'
            include 'config/liquibase/**'
            include 'config/application-artemis.yml'
            include 'config/application-gitlab.yml'
            include 'config/application-jenkins.yml'
        }
    }
    externalTest {
        java {
            srcDir file("../src/test")
            include "java/de/tum/in/www1/artemis/util/RequestUtilService.*"
            include "java/de/tum/in/www1/artemis/util/DatabaseCleanupService.*"
            include "java/de/tum/in/www1/artemis/util/ConfigUtil.*"
            include "java/de/tum/in/www1/artemis/util/ModelFactory.*"
            include "java/de/tum/in/www1/artemis/util/TestConstants.*"
            include "java/de/tum/in/www1/artemis/connector/GitlabRequestMockProvider.*"
            include "java/de/tum/in/www1/artemis/connector/JenkinsRequestMockProvider.*"
            include "java/de/tum/in/www1/artemis/connector/JiraRequestMockProvider.*"
            include "java/de/tum/in/www1/artemis/connector/BitbucketRequestMockProvider.*"


            srcDir file("../src/main")
            include "java/de/tum/in/www1/artemis/util/FileUtils.*"
            include "java/de/tum/in/www1/artemis/service/UrlService.*"
            include "java/de/tum/in/www1/artemis/service/connectors/VersionControlRepositoryPermission.*"
            include "java/de/tum/in/www1/artemis/service/connectors/bamboo/dto/**"
            include "java/de/tum/in/www1/artemis/service/connectors/bitbucket/BitbucketPermission.*"
            include "java/de/tum/in/www1/artemis/service/connectors/bitbucket/dto/**"
            include "java/de/tum/in/www1/artemis/service/connectors/jenkins/dto/**"
        }
    }
    main {
        compileClasspath += external.java
        java {
            srcDir external.java
        }
        resources {
            srcDir external.resources
        }
    }
    test {
        compileClasspath += external.java
        compileClasspath += externalTest.java

        java {
            srcDir external.java
            srcDir externalTest.java
        }
    }
}

idea {
    module {
        excludeDirs += files("node_modules")
    }
}

spotless {
    // allows to execute the code formatting commands ./gradlew :gateway:spotlessApply and ./gradlew :gateway:spotlessCheck
    java {
        target project.fileTree(project.rootDir) {
            include "gateway/**/*.java"
            exclude "**/src/main/java/de/tum/in/www1/artemis/usermanagement/config/SecurityConfiguration.java", "**/node_modules/**",
                "**/out/**", "**/repos/**", "**/build/**", "**/src/main/generated/**", "**/src/main/resources/templates/**",
                "**/exports/**", "src/main/java/de/tum/in/www1/artemis/**"
        }
        importOrderFile "../artemis-spotless.importorder"
        eclipse().configFile "../artemis-spotless-style.xml"

        removeUnusedImports()
    }
}

defaultTasks "bootRun"

springBoot {
    mainClass = "de.tum.in.www1.artemis.usermanagement.UserManagementApp"
}

bootRun {
    jvmArgs = ["--illegal-access=warn"]
}

modernizer {
    failOnViolations = true
    includeTestClasses = true
}

configurations {
    providedRuntime
}

apply from: "../gradle/dependencies.gradle"

dependencies {
    implementation "com.offbytwo.jenkins:jenkins-client:${offbytwo_jenkins_client_version}"
    implementation "org.gitlab4j:gitlab4j-api:${gitlab4j_api_version}"
    implementation "de.jplag:jplag:${jplag_version}"

    // https://mvnrepository.com/artifact/net.sourceforge.plantuml/plantuml
    implementation "net.sourceforge.plantuml:plantuml:${sourceforge_plantuml_version}"
    implementation "org.imsglobal:basiclti-util:${imsglobal_basiclti_util_version}"
    implementation "me.xdrop:fuzzywuzzy:${xdrop_fuzzywuzzy_version}"
    implementation "com.atlassian.bamboo:bamboo-specs:${atlassian_bamboo_specs_version}"
    implementation "com.thoughtworks.qdox:qdox:${thoughtworks_qdox_version}"

    implementation "org.springdoc:springdoc-openapi-ui:${springdoc_openapi_ui_version}"

    implementation "com.hazelcast:hazelcast:${hazelcast_version}"
    implementation "com.hazelcast:hazelcast-spring:${hazelcast_version}"
    implementation "com.hazelcast:hazelcast-hibernate53:${hazelcast_hibernate53_version}"
    implementation "org.hibernate:hibernate-core:${hibernate_version}"
    implementation "com.zaxxer:HikariCP:${zaxxer_HikariCP_version}"
    implementation "org.apache.commons:commons-text:${apache_commons_text_version}"
    implementation "org.apache.commons:commons-math3:${apache_commons_math3_version}"
    implementation "org.apache.commons:commons-lang3"
    implementation "org.hibernate:hibernate-jcache:${hibernate_version}"
    implementation "org.hibernate:hibernate-entitymanager:${hibernate_version}"
    implementation "org.liquibase:liquibase-core:${liquibase_core_version}"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:${spring_boot_version}"
    implementation ("org.springframework.boot:spring-boot-starter-web:${spring_boot_version}") {
        exclude module: "spring-boot-starter-undertow"
    }
    implementation "org.springframework.boot:spring-boot-starter-tomcat:${spring_boot_version}"
    implementation "org.springframework.boot:spring-boot-starter-websocket:${spring_boot_version}"
    implementation "org.springframework.boot:spring-boot-starter-undertow:${spring_boot_version}"

    implementation "org.springframework.ldap:spring-ldap-core:${spring_ldap_core_version}"
    implementation "org.springframework.data:spring-data-ldap:${spring_data_ldap_version}"

    implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations"
    implementation "javax.annotation:javax.annotation-api"
    implementation "io.dropwizard.metrics:metrics-core"

    implementation "org.springframework.cloud:spring-cloud-starter"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-hystrix"
    implementation "org.springframework.retry:spring-retry"
    implementation "org.springframework.cloud:spring-cloud-starter-bootstrap"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign:3.1.0"
    implementation "org.springframework.security:spring-security-data:${spring_security_version}"
    implementation "org.xmlbeam:xmlprojector:${xmlbeam_xmlprojector_version}"
    implementation "mysql:mysql-connector-java:${mysql_connector_java_version}"

    implementation "org.zalando:problem-spring-web:${zalando_problem_version}"
    implementation "com.ibm.icu:icu4j:${ibm_icu4j_version}"
    implementation "com.github.seancfoley:ipaddress:${github_seancfoley_ipaddress_version}"
    implementation "org.apache.maven:maven-model:${apache_model_version}"
    implementation "org.apache.pdfbox:pdfbox:${apache_pdfbox_version}"

    implementation "org.springframework.boot:spring-boot-starter-artemis:${spring_boot_version}"

    annotationProcessor "org.hibernate:hibernate-jpamodelgen:${hibernate_version}"
    annotationProcessor ("org.glassfish.jaxb:jaxb-runtime:${jaxb_runtime_version}") {
        exclude group: "javax.ws.rs", module: "jsr311-api"
    }

    developmentOnly "org.springframework.boot:spring-boot-devtools:${spring_boot_version}"
    testImplementation "com.h2database:h2:${h2_database_version}"

}

task executeTests (type: Exec) {
    commandLine "./gradlew", "test"
}

// Command to execute the JavaDoc checkstyle verification ./gradlew checkstyleMain
checkstyle {
    toolVersion "${checkstyle_version}"
    configFile file("../checkstyle.xml")
    checkstyleTest.enabled = false
    maxErrors = 0
}

nohttp {
    source.include "build.gradle", "README.md"
}

task executeCheckstyle (type: Exec) {
    commandLine "./gradlew", "checkstyleMain"
}

task buildJarForDocker (type: Exec) {
    commandLine "./gradlew", ":user-management:build", "-x", "test", "-x", "jacocoTestCoverageVerification"
}

compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo

// Available commands:
//
// 1) Build production:                             ./gradlew -Pprod -Pwar clean bootWar
// 2) Execute tests with coverage report:           ./gradlew executeTests jacocoTestReport
// 2a) Execute tests without coverage report:       ./gradlew executeTests
// 2b) Run a single test:                           ./gradlew test --tests ExamIntegrationTest or ./gradlew test --tests ExamIntegrationTest.testGetExamScore
// 3) Check Java code format:                       ./gradlew spotlessCheck
// 4) Apply Java code formatter:                    ./gradlew spotlessApply
// 5) Find dependency updates:                      ./gradlew dependencyUpdates -Drevision=release
// 6) Check JavaDoc:                                ./gradlew checkstyleMain
// 7) Verify code coverage (after tests):           ./gradlew jacocoTestCoverageVerification
