apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: deployment-artemis-service-artemis
  name: artemis-service
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
        app: deployment-artemis-service-artemis
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
          app: deployment-artemis-service-artemis
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: artemis-app
            optional: false
        - configMapRef:
            name: jhipster-registry-config
            optional: false
        - secretRef:
            name: artemis-secrets
            optional: false
        image: ghcr.io/ls1intum/artemis-service
        imagePullPolicy: Always
        name: artemis-service
        ports:
        - containerPort: 8080
          name: 8080tcp02
          protocol: TCP
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities: {}
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: false
        volumeMounts:
        - mountPath: /artemisdata/
          name: artemis
      initContainers:
      - command:
        - /bin/sh
        - -c
        - |-
          while true
          do
            rt=$(nc -z -w 1 artemis-mysql 3306)
            if [ $? -eq 0 ]; then
              echo "DB is UP"
              break
            fi
            echo "DB is not yet reachable;sleep for 10s before retry"
            sleep 10
          done
        image: busybox:latest
        imagePullPolicy: Always
        name: init-ds
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      restartPolicy: Always
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: artemis
        persistentVolumeClaim:
          claimName: artemis
